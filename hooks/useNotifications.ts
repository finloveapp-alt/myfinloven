import React, { useState, useEffect, useRef } from 'react';
import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';

// Configurar como as notifica√ß√µes devem ser tratadas quando recebidas
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

export function useNotifications() {
  const [expoPushToken, setExpoPushToken] = useState<string | undefined>('local-testing-mode');
  const [notification, setNotification] = useState<Notifications.Notification | undefined>();
  const notificationListener = useRef<Notifications.Subscription>();
  const responseListener = useRef<Notifications.Subscription>();

  useEffect(() => {
    // Configurar permiss√µes b√°sicas para notifica√ß√µes locais
    setupLocalNotifications();

    // Agendar notifica√ß√µes automaticamente na primeira abertura do app
    scheduleDailyNotification();
    scheduleMorningNotification();
    scheduleLunchNotification();
    scheduleEveningNotification();
    scheduleMondayNotification();
    scheduleWednesdayNotification();
    scheduleFridayNotification();
    scheduleSaturdayNotification();
    scheduleSundayNotification();
    scheduleMonthlyNotification();
    scheduleBillsReminderNotification();
    scheduleMidMonthNotification();
    scheduleEndMonthNotification();
    scheduleLastDayMonthNotification();

    // Listener para notifica√ß√µes recebidas enquanto o app est√° em foreground
    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    // Listener para quando o usu√°rio toca na notifica√ß√£o
    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      console.log('Notifica√ß√£o tocada:', response);
    });

    return () => {
      if (notificationListener.current) {
        Notifications.removeNotificationSubscription(notificationListener.current);
      }
      if (responseListener.current) {
        Notifications.removeNotificationSubscription(responseListener.current);
      }
    };
  }, []);

  // Fun√ß√£o para enviar notifica√ß√£o local de teste
  const sendTestNotification = async () => {
    console.log('Agendando notifica√ß√£o para 30 segundos...');
    
    const notificationId = await Notifications.scheduleNotificationAsync({
      content: {
        title: "üíï Teste MyFinlove!",
        body: "Bom dia, casal! Bora come√ßar no amor (e no controle)? ‚òÄüíë",
        data: { testData: 'Dados de teste' },
      },
      trigger: {
        type: 'timeInterval',
        seconds: 30,
        repeats: false,
      },
    });
    
    console.log('Notifica√ß√£o agendada com ID:', notificationId);
  };

  // Fun√ß√£o para enviar notifica√ß√£o imediata
  const sendImmediateNotification = async () => {
    await Notifications.scheduleNotificationAsync({
      content: {
        title: "üçü‚ù§ Lanchinho pago?",
        body: "Bora anotar no FinLove! Gastos de hoje = meta de amanh√£.",
        data: { type: 'expense_reminder' },
      },
      trigger: null, // Imediata
    });
  };

  // Fun√ß√£o para agendar notifica√ß√£o de contas fixas (dia 5 de cada m√™s √†s 17:00)
  const scheduleBillsReminderNotification = async () => {
    console.log('Agendando notifica√ß√£o de contas fixas para o dia 5 √†s 17:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 12 meses
    for (let i = 0; i < 12; i++) {
      const futureDate = new Date(now.getFullYear(), now.getMonth() + i, 5, 17, 0, 0, 0);
      
      // Se a data j√° passou este m√™s, come√ßar do pr√≥ximo m√™s
      if (futureDate <= now) {
        continue;
      }
      
      await Notifications.scheduleNotificationAsync({
        content: {
          title: "Contas fixas pagas ou s√≥ prometeram? üí∏",
          body: "Confiram os pagamentos da semana e evitem o fantasma do juros!",
          data: { type: 'bills_reminder' },
        },
        trigger: {
          type: 'timeInterval',
          seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
          repeats: false,
        },
      });
    }
    
    console.log('Notifica√ß√µes de contas fixas agendadas para o dia 5 √†s 17:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o no meio do m√™s (dia 15 de cada m√™s √†s 12:00)
  const scheduleMidMonthNotification = async () => {
    console.log('Agendando notifica√ß√£o de meio do m√™s para o dia 15 √†s 12:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 12 meses
    for (let i = 0; i < 12; i++) {
      const futureDate = new Date(now.getFullYear(), now.getMonth() + i, 15, 12, 0, 0, 0);
      
      // Se a data j√° passou este m√™s, come√ßar do pr√≥ximo m√™s
      if (futureDate <= now) {
        continue;
      }
      
      await Notifications.scheduleNotificationAsync({
        content: {
          title: "Metade do m√™s = hora de dar aquela olhadinha üëÄ",
          body: "J√° √© dia 15! Vale revisar e ajustar antes que o m√™s corra.",
          data: { type: 'mid_month_reminder' },
        },
        trigger: {
          type: 'timeInterval',
          seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
          repeats: false,
        },
      });
    }
    
    console.log('Notifica√ß√µes de meio do m√™s agendadas para o dia 15 √†s 12:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o no final do m√™s (dia 25 de cada m√™s √†s 14:00)
  const scheduleEndMonthNotification = async () => {
    console.log('Agendando notifica√ß√£o de final do m√™s para o dia 25 √†s 14:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 12 meses
    for (let i = 0; i < 12; i++) {
      const futureDate = new Date(now.getFullYear(), now.getMonth() + i, 25, 14, 0, 0, 0);
      
      // Se a data j√° passou este m√™s, come√ßar do pr√≥ximo m√™s
      if (futureDate <= now) {
        continue;
      }
      
      await Notifications.scheduleNotificationAsync({
        content: {
          title: "Esse m√™s voou! T√£o no azul ou no \"a gente se ama mesmo assim\"? üíîüí∏",
          body: "Ajustem categorias e fechem bonito.",
          data: { type: 'end_month_reminder' },
        },
        trigger: {
          type: 'timeInterval',
          seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
          repeats: false,
        },
      });
    }
    
    console.log('Notifica√ß√µes de final do m√™s agendadas para o dia 25 √†s 14:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o no √∫ltimo dia do m√™s √†s 18:00
  const scheduleLastDayMonthNotification = async () => {
    console.log('Agendando notifica√ß√£o do √∫ltimo dia do m√™s √†s 18:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 12 meses
    for (let i = 0; i < 12; i++) {
      // Calcular o √∫ltimo dia do m√™s
      const lastDay = new Date(now.getFullYear(), now.getMonth() + i + 1, 0);
      const futureDate = new Date(lastDay.getFullYear(), lastDay.getMonth(), lastDay.getDate(), 18, 0, 0, 0);
      
      // Se a data j√° passou este m√™s, come√ßar do pr√≥ximo m√™s
      if (futureDate <= now) {
        continue;
      }
      
      await Notifications.scheduleNotificationAsync({
        content: {
          title: "Casal que vence junto, economiza junto üëèüí∞",
          body: "Fechamento do m√™s ativado! Revisem juntos e celebrem at√© as pequenas vit√≥rias.",
          data: { type: 'last_day_month_reminder' },
        },
        trigger: {
          type: 'timeInterval',
          seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
          repeats: false,
        },
      });
    }
    
    console.log('Notifica√ß√µes do √∫ltimo dia do m√™s agendadas √†s 18:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o mensal (dia 1 de cada m√™s √†s 09:00)
  const scheduleMonthlyNotification = async () => {
    console.log('Agendando notifica√ß√£o mensal para o dia 1 √†s 09:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 12 meses
    for (let i = 0; i < 12; i++) {
      const futureDate = new Date(now.getFullYear(), now.getMonth() + i, 1, 9, 0, 0, 0);
      
      // Se a data j√° passou este m√™s, come√ßar do pr√≥ximo m√™s
      if (futureDate <= now) {
        continue;
      }
      
      await Notifications.scheduleNotificationAsync({
        content: {
          title: "M√™s novo, casal novo? Bora alinhar tudo! üóìüíû",
          body: "Hora de sonhar juntos: criem as metas e combinem o plano de jogo.",
          data: { type: 'monthly_reminder' },
        },
        trigger: {
          type: 'timeInterval',
          seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
          repeats: false,
        },
      });
    }
    
    console.log('Notifica√ß√µes mensais agendadas para o dia 1 √†s 09:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o de domingo (domingo √†s 20:00)
  const scheduleSundayNotification = async () => {
    console.log('Agendando notifica√ß√£o de domingo √†s 20:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 30 dias
    for (let i = 0; i <= 30; i++) {
      const futureDate = new Date(now);
      futureDate.setDate(futureDate.getDate() + i);
      futureDate.setHours(20, 0, 0, 0);
      
      // Verificar se √© domingo (0)
      const dayOfWeek = futureDate.getDay();
      if (dayOfWeek === 0) {
        // Se o hor√°rio j√° passou hoje, pular para o pr√≥ximo domingo
        if (i === 0 && now > futureDate) {
          continue;
        }
        
        await Notifications.scheduleNotificationAsync({
          content: {
            title: "Domingo √† noite: papo leve, check r√°pido e sof√° em paz üõãÔ∏è",
            body: "Revise, anote e entre na semana com o p√© (e o bolso) direito.",
            data: { type: 'sunday_reminder' },
          },
          trigger: {
            type: 'timeInterval',
            seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
            repeats: false,
          },
        });
      }
    }
    
    console.log('Notifica√ß√µes de domingo agendadas √†s 20:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o de s√°bado (s√°bado √†s 10:00)
  const scheduleSaturdayNotification = async () => {
    console.log('Agendando notifica√ß√£o de s√°bado √†s 10:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 30 dias
    for (let i = 0; i <= 30; i++) {
      const futureDate = new Date(now);
      futureDate.setDate(futureDate.getDate() + i);
      futureDate.setHours(10, 0, 0, 0);
      
      // Verificar se √© s√°bado (6)
      const dayOfWeek = futureDate.getDay();
      if (dayOfWeek === 6) {
        // Se o hor√°rio j√° passou hoje, pular para o pr√≥ximo s√°bado
        if (i === 0 && now > futureDate) {
          continue;
        }
        
        await Notifications.scheduleNotificationAsync({
          content: {
            title: "Casal que organiza de manh√£, aproveita o s√°bado sem peso üíñ‚ù§Ô∏è",
            body: "Um toque de organiza√ß√£o deixa o dia mais leve. Bora?",
            data: { type: 'saturday_reminder' },
          },
          trigger: {
            type: 'timeInterval',
            seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
            repeats: false,
          },
        });
      }
    }
    
    console.log('Notifica√ß√µes de s√°bado agendadas √†s 10:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o de sexta-feira (sexta √†s 19:00)
  const scheduleFridayNotification = async () => {
    console.log('Agendando notifica√ß√£o de sexta-feira √†s 19:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 30 dias
    for (let i = 0; i <= 30; i++) {
      const futureDate = new Date(now);
      futureDate.setDate(futureDate.getDate() + i);
      futureDate.setHours(19, 0, 0, 0);
      
      // Verificar se √© sexta-feira (5)
      const dayOfWeek = futureDate.getDay();
      if (dayOfWeek === 5) {
        // Se o hor√°rio j√° passou hoje, pular para a pr√≥xima sexta
        if (i === 0 && now > futureDate) {
          continue;
        }
        
        await Notifications.scheduleNotificationAsync({
          content: {
            title: "Sextou! E a√≠, tem rol√™ ou vai economizar? üéâ",
            body: "Ajustem o or√ßamento e curtam o fds sem medo da fatura!",
            data: { type: 'friday_reminder' },
          },
          trigger: {
            type: 'timeInterval',
            seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
            repeats: false,
          },
        });
      }
    }
    
    console.log('Notifica√ß√µes de sexta-feira agendadas √†s 19:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o de quarta-feira (quarta √†s 18:00)
  const scheduleWednesdayNotification = async () => {
    console.log('Agendando notifica√ß√£o de quarta-feira √†s 18:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 30 dias
    for (let i = 0; i <= 30; i++) {
      const futureDate = new Date(now);
      futureDate.setDate(futureDate.getDate() + i);
      futureDate.setHours(18, 0, 0, 0);
      
      // Verificar se √© quarta-feira (3)
      const dayOfWeek = futureDate.getDay();
      if (dayOfWeek === 3) {
        // Se o hor√°rio j√° passou hoje, pular para a pr√≥xima quarta
        if (i === 0 && now > futureDate) {
          continue;
        }
        
        await Notifications.scheduleNotificationAsync({
          content: {
            title: "J√° virou a semana? E o limite, virou tamb√©m? üí∏",
            body: "Confiram os gastos e evitem surpresas at√© sexta.",
            data: { type: 'wednesday_reminder' },
          },
          trigger: {
            type: 'timeInterval',
            seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
            repeats: false,
          },
        });
      }
    }
    
    console.log('Notifica√ß√µes de quarta-feira agendadas √†s 18:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o de segunda-feira (segunda √†s 06:00)
  const scheduleMondayNotification = async () => {
    console.log('Agendando notifica√ß√£o de segunda-feira √†s 06:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 30 dias
    for (let i = 0; i <= 30; i++) {
      const futureDate = new Date(now);
      futureDate.setDate(futureDate.getDate() + i);
      futureDate.setHours(6, 0, 0, 0);
      
      // Verificar se √© segunda-feira (1)
      const dayOfWeek = futureDate.getDay();
      if (dayOfWeek === 1) {
        // Se o hor√°rio j√° passou hoje, pular para a pr√≥xima segunda
        if (i === 0 && now > futureDate) {
          continue;
        }
        
        await Notifications.scheduleNotificationAsync({
          content: {
            title: "Nova semana, novos planos! üéØüíò",
            body: "Tomem caf√©, combinem as metas e deixem o financeiro no modo romance.",
            data: { type: 'monday_reminder' },
          },
          trigger: {
            type: 'timeInterval',
            seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
            repeats: false,
          },
        });
      }
    }
    
    console.log('Notifica√ß√µes de segunda-feira agendadas √†s 06:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o noturna (segunda a sexta √†s 21:00)
  const scheduleEveningNotification = async () => {
    console.log('Agendando notifica√ß√£o noturna para segunda a sexta √†s 21:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 30 dias
    for (let i = 0; i <= 30; i++) {
      const futureDate = new Date(now);
      futureDate.setDate(futureDate.getDate() + i);
      futureDate.setHours(21, 0, 0, 0);
      
      // Verificar se √© segunda (1), ter√ßa (2), quarta (3), quinta (4) ou sexta (5)
      const dayOfWeek = futureDate.getDay();
      if (dayOfWeek >= 1 && dayOfWeek <= 5) {
        // Se o hor√°rio j√° passou hoje, pular para o pr√≥ximo dia v√°lido
        if (i === 0 && now > futureDate) {
          continue;
        }
        
        await Notifications.scheduleNotificationAsync({
          content: {
            title: "Momento casal: antes da s√©rie, confere a√≠ üì±",
            body: "Revisem o dia e mantenham o time FinLove no controle!",
            data: { type: 'evening_reminder' },
          },
          trigger: {
            type: 'timeInterval',
            seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
            repeats: false,
          },
        });
      }
    }
    
    console.log('Notifica√ß√µes noturnas agendadas para segunda a sexta √†s 21:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o do lanche (todo dia √†s 13:00)
  const scheduleLunchNotification = async () => {
    console.log('Agendando notifica√ß√£o do lanche para todo dia √†s 13:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 31 dias
    for (let i = 0; i <= 30; i++) {
      const futureDate = new Date(now);
      futureDate.setDate(futureDate.getDate() + i);
      futureDate.setHours(13, 0, 0, 0);
      
      // Se o hor√°rio j√° passou hoje, pular para o pr√≥ximo dia
      if (i === 0 && now > futureDate) {
        continue;
      }
      
      await Notifications.scheduleNotificationAsync({
        content: {
          title: "Lanchinho pago? Bora anotar no FinLove üçü‚ù§Ô∏è",
          body: "Gastos de hoje = meta de amanh√£. S√≥ 1 min a dois j√° ajuda!",
          data: { type: 'lunch_reminder' },
        },
        trigger: {
          type: 'timeInterval',
          seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
          repeats: false,
        },
      });
    }
    
    console.log('Notifica√ß√µes do lanche agendadas para todo dia √†s 13:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o matinal (ter√ßa a sexta √†s 06:00)
  const scheduleMorningNotification = async () => {
    console.log('Agendando notifica√ß√£o matinal para ter√ßa a sexta √†s 06:00...');
    
    const now = new Date();
    
    // Agendar para os pr√≥ximos 30 dias
    for (let i = 0; i <= 30; i++) {
      const futureDate = new Date(now);
      futureDate.setDate(futureDate.getDate() + i);
      futureDate.setHours(6, 0, 0, 0);
      
      // Verificar se √© ter√ßa (2), quarta (3), quinta (4) ou sexta (5)
      const dayOfWeek = futureDate.getDay();
      if (dayOfWeek >= 2 && dayOfWeek <= 5) {
        // Se o hor√°rio j√° passou hoje, pular para o pr√≥ximo dia v√°lido
        if (i === 0 && now > futureDate) {
          continue;
        }
        
        await Notifications.scheduleNotificationAsync({
          content: {
            title: "Bom dia, casal! Bora come√ßar no amor (e no controle)? ‚òÄÔ∏è",
            body: "Planejem rapidinho os gastos do dia e deixem o resto fluir.",
            data: { type: 'morning_reminder' },
          },
          trigger: {
            type: 'timeInterval',
            seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
            repeats: false,
          },
        });
      }
    }
    
    console.log('Notifica√ß√µes matinais agendadas para ter√ßa a sexta √†s 06:00');
  };

  // Fun√ß√£o para agendar notifica√ß√£o di√°ria √†s 09:00
  const scheduleDailyNotification = async () => {
    console.log('Agendando notifica√ß√£o di√°ria para 09:00...');
    
    // Primeiro, cancelar notifica√ß√µes di√°rias existentes
    await Notifications.cancelAllScheduledNotificationsAsync();
    
    // Criar a data para hoje √†s 09:00
    const now = new Date();
    const scheduledDate = new Date();
    scheduledDate.setHours(9, 0, 0, 0);
    
    // Se j√° passou das 09:00 hoje, agendar para amanh√£
    if (now > scheduledDate) {
      scheduledDate.setDate(scheduledDate.getDate() + 1);
    }
    
    const notificationId = await Notifications.scheduleNotificationAsync({
      content: {
        title: "üíï Hora do FinLove!",
        body: "Que tal revisar os gastos de hoje com seu amor? üíëüí∞",
        data: { type: 'daily_reminder' },
      },
      trigger: {
        type: 'timeInterval',
        seconds: Math.floor((scheduledDate.getTime() - now.getTime()) / 1000),
        repeats: false,
      },
    });
    
    // Agendar as pr√≥ximas notifica√ß√µes (para os pr√≥ximos 30 dias)
    for (let i = 1; i <= 30; i++) {
      const futureDate = new Date(scheduledDate);
      futureDate.setDate(futureDate.getDate() + i);
      
      await Notifications.scheduleNotificationAsync({
        content: {
          title: "üíï Hora do FinLove!",
          body: "Que tal revisar os gastos de hoje com seu amor? üíëüí∞",
          data: { type: 'daily_reminder' },
        },
        trigger: {
          type: 'timeInterval',
          seconds: Math.floor((futureDate.getTime() - now.getTime()) / 1000),
          repeats: false,
        },
      });
    }
    
    console.log('Notifica√ß√£o di√°ria agendada com ID:', notificationId);
    console.log('Pr√≥xima notifica√ß√£o ser√° em:', scheduledDate.toLocaleString());
    return notificationId;
  };

  // Fun√ß√£o para cancelar todas as notifica√ß√µes di√°rias
  const cancelDailyNotifications = async () => {
    await Notifications.cancelAllScheduledNotificationsAsync();
    console.log('Todas as notifica√ß√µes di√°rias foram canceladas');
  };

  // Estado para controlar o modal de meta atingida
  const [goalReachedModal, setGoalReachedModal] = React.useState({
    visible: false,
    goalTitle: '',
    goalAmount: 0
  });

  // Fun√ß√£o para mostrar modal interno quando meta for atingida
  const notifyGoalReached = async (goalTitle: string, goalAmount: number) => {
    console.log('üéØ === IN√çCIO notifyGoalReached (Modal Interno) ===');
    console.log('üéØ Meta atingida:', goalTitle);
    console.log('üéØ Valor da meta:', goalAmount);
    
    // Mostrar modal interno ao inv√©s de notifica√ß√£o externa
    setGoalReachedModal({
      visible: true,
      goalTitle,
      goalAmount
    });
    
    console.log('üéØ ‚úÖ Modal de meta atingida exibido');
    console.log('üéØ === FIM notifyGoalReached ===');
  };

  // Fun√ß√£o para fechar o modal de meta atingida
  const closeGoalReachedModal = () => {
    setGoalReachedModal({
      visible: false,
      goalTitle: '',
      goalAmount: 0
    });
  };

  // Fun√ß√£o para agendar todas as notifica√ß√µes de uma vez
  const scheduleAllNotifications = async () => {
    console.log('Agendando todas as notifica√ß√µes...');
    
    try {
      await scheduleDailyNotification();
      await scheduleMorningNotification();
      await scheduleLunchNotification();
      await scheduleEveningNotification();
      await scheduleMondayNotification();
      await scheduleWednesdayNotification();
      await scheduleFridayNotification();
      await scheduleSaturdayNotification();
      await scheduleSundayNotification();
      await scheduleMonthlyNotification();
      await scheduleBillsReminderNotification();
      await scheduleMidMonthNotification();
      await scheduleEndMonthNotification();
      await scheduleLastDayMonthNotification();
      
      console.log('Todas as notifica√ß√µes foram agendadas com sucesso!');
    } catch (error) {
      console.error('Erro ao agendar notifica√ß√µes:', error);
    }
  };

  // Fun√ß√£o para resetar o status de notifica√ß√µes agendadas (√∫til para reagendar)
   const resetNotificationsStatus = async () => {
     try {
       const AsyncStorage = await import('@react-native-async-storage/async-storage');
       await AsyncStorage.default.removeItem('@MyFinlove:notificationsScheduled');
       console.log('Status de notifica√ß√µes resetado. Pr√≥xima entrada no app ir√° reagendar.');
     } catch (error) {
       console.error('Erro ao resetar status de notifica√ß√µes:', error);
     }
   };

  return {
    expoPushToken,
    notification,
    sendTestNotification,
    sendImmediateNotification,
    scheduleDailyNotification,
    scheduleMorningNotification,
    scheduleLunchNotification,
    scheduleEveningNotification,
    scheduleMondayNotification,
    scheduleWednesdayNotification,
    scheduleFridayNotification,
    scheduleSaturdayNotification,
    scheduleSundayNotification,
    scheduleMonthlyNotification,
    scheduleBillsReminderNotification,
    scheduleMidMonthNotification,
    scheduleEndMonthNotification,
    scheduleLastDayMonthNotification,
    cancelDailyNotifications,
    notifyGoalReached,
    scheduleAllNotifications,
    resetNotificationsStatus,
    goalReachedModal,
    closeGoalReachedModal,
  };
}

// Fun√ß√£o para configurar notifica√ß√µes locais b√°sicas
async function setupLocalNotifications() {
  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('default', {
      name: 'MyFinlove Notifications',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#b687fe',
    });
  }

  const { status: existingStatus } = await Notifications.getPermissionsAsync();
  let finalStatus = existingStatus;
  
  if (existingStatus !== 'granted') {
    const { status } = await Notifications.requestPermissionsAsync();
    finalStatus = status;
  }
  
  if (finalStatus !== 'granted') {
    console.warn('Permiss√£o para notifica√ß√µes n√£o concedida');
    return false;
  }
  
  console.log('Notifica√ß√µes locais configuradas com sucesso');
  return true;
}